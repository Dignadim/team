<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.dao.EventboardDAO">

	<insert id="evInsert" parameterType="ev_vo">
	 	insert into ev_board (ev_idx, ev_sellcvs, ev_subject, ev_content, ev_notice, ev_filename, id, nickname) 
	 	values (ev_board_idx_seq.nextval, #{ev_sellcvs}, #{ev_subject}, #{ev_content}, #{ev_notice}, #{ev_filename, jdbcType=VARCHAR}, #{id}, #{nickname})
 	</insert>
 	
 	 <select id="evSelectCount" resultType="int">
 		select count(*) from ev_board
 	</select>
 	
 	 <select id="evSelectList" parameterType="java.util.HashMap" resultType="ev_vo">
 		<![CDATA[
 		select * from (
 			select rownum rnum, GG.* from (
 				select * from ev_board order by ev_idx desc
 			) GG where rownum <= #{endNo}
 		) where rnum >= #{startNo}		
 		]]>
 	</select>
 	
 	 <select id="evSelectNotice" resultType="ev_vo">
 		select * from ev_board where ev_notice = 'yes' order by ev_idx desc
 	</select>
 	
 	<update id="evIncrement" parameterType="int">
 		update ev_board set ev_hit = ev_hit + 1 where ev_idx = #{ev_idx}
 	</update>
 	
 	<select id="evSelectByIdx" parameterType="int" resultType="ev_vo">
 		select * from ev_board where ev_idx = #{ev_idx}
 	</select>
 	
 	<update id="evUpdate" parameterType="ev_vo">
 		update ev_board set ev_sellcvs = #{ev_sellcvs} ,ev_subject = #{ev_subject}, ev_content = #{ev_content}, ev_notice = #{ev_notice} where ev_idx = #{ev_idx}
 	</update>
 	
 	<delete id="evDelete" parameterType="int">
		delete from ev_board where ev_idx = #{ev_idx} 	
 	</delete>
 	
 	<!-- 관리자의 프로필 닉네임을 바꾸면 기존 게시글 프로필 이미지, 닉네임도 바꿔주는 명령문 -->
	<update id="changeBoardInfo" parameterType="mb_vo">
		update ev_board set nickname = #{nickname} where id = #{id}
	</update>
 	
 	<!-- 특정 카테고리의 게시글의 수를 받아오는 명령문 -->
 	<select id="evSelectCountCategory" parameterType="searchTool" resultType="int">
 		select count(*) from ev_board where ev_sellcvs = #{category}
 	</select>
 	
 	<!-- 1페이지 분량의 특정 카테고리의 글을 얻어온다. -->
 	<select id="evSelectListCategory" parameterType="searchTool" resultType="ev_vo">
		<![CDATA[  
 		select * from (
			select rownum rnum, GG.* from (
				select * from ev_board where trim(ev_sellcvs) = #{category} order by ev_idx desc
			) GG where rownum <= #{endNo}
		) where rnum >= #{startNo}	
		]]>
 	</select>
 	
 	<select id="evSelectCountMulti" parameterType="searchTool" resultType="int">
 		<!-- 카테고리가 "전체"일 경우 -->
 		<if test="category.equals('전체')">
 			select count(*) from ev_board where ev_subject like '%'||#{searchText}||'%'
 		</if>
 		<!-- 카테고리가 "전체"가 아닐 경우 -->
 		<if test="!category.equals('전체')">
 			select count(*) from ev_board where ev_sellcvs = #{category} and ev_subject like '%'||#{searchText}||'%'
 		</if>
 	</select>
 	
 	 <select id="evSelectListMulti" parameterType="searchTool" resultType="ev_vo">
 	 	<!-- 카테고리가 "전체"일 경우 -->
 	 	<if test='category.equals("전체")'>
			<![CDATA[  
	 		select * from (
				select rownum rnum, GG.* from (
					select * from ev_board where ev_subject like '%'||#{searchText}||'%' order by ev_idx desc
				) GG where rownum <= #{endNo}
			) where rnum >= #{startNo}	
			]]> 	 	
 	 	</if>
 	 	<!-- 카테고리가 "전체"가 아닐 경우 -->
 	 	<if test="!category.equals('전체')">
			<![CDATA[  
	 		select * from (
				select rownum rnum, GG.* from (
					select * from ev_board where trim(ev_sellcvs) = #{category} 
						and ev_subject like '%'||#{searchText}||'%' order by ev_idx desc
				) GG where rownum <= #{endNo}
			) where rnum >= #{startNo}	
			]]>
		</if>
 	</select>
 	

	<!-- 가장 최근에 insert된 1건을 가져오는 sql 명령문 -->
	<select id="selectRecentlyInsert" resultType="ev_vo">
 		<![CDATA[  
	 		select * from (
					select * from ev_board order by ev_date desc
			) where rownum <= 1	
		]]>
	</select>
 	
 	
	<!-- 어드민에 들어가는 코드 -->
	<select id="aebSelectList" resultType="ev_vo">
	select * from ev_board where ev_notice = 'yes' order by ev_idx desc
	</select>
	
	
	
	
	<!-- 스케줄들 관련된 sql 명령문들 -->
 	
	<!-- 모든 스케줄을 받아오는 용도 -->
	<select id="initSchedList" resultType="sche_vo">
	 	select * from schedule order by cvs, syear, smonth, sday, gup
	</select>
	
	<!-- 특정 idx의 스케줄을 받아오는 용도 -->
	<select id="initSchedListGetIdx" parameterType="int" resultType="sche_vo">
	 	select * from schedule where gup = #{gup}
	</select>
	
	<!-- 스케줄을 추가하는 용도 -->
	<insert id="insertSched" parameterType="sche_vo">
		insert into schedule (syear, smonth, sday, eyear, emonth, eday, event, gup, CVS)
		values (#{sYear}, #{sMonth}, #{sDay}, #{eYear}, #{eMonth}, #{eDay},
		#{event}, #{gup}, #{CVS})
	</insert>

	<!-- 스케줄을 수정해주는 용도 -->
	 <update id="updateSched" parameterType="sche_vo">
 		update schedule set syear = #{sYear}, smonth = #{sMonth}, sday = #{sDay}, eyear = #{eYear}, emonth = #{eMonth}, eday = #{eDay}, event = #{event}, CVS = #{CVS} where gup = #{gup}
 	</update>

	<!-- 스케줄을 삭제해주는 용도 -->
 	<delete id="deleteSched" parameterType="int">
		delete from schedule where gup = #{gup} 	
 	</delete>

 	<!-- 크롤링한 행사를 등록하는 용도 -->
<!--  	<select id="autoEventInsert" parameterType="java.util.ArrayList">
 		<foreach collection="list" item="item" separator=" " index="index" open="INSERT ALL" close="SELECT * FROM DUAL">
	 		into ev_board (ev_idx, ev_sellcvs, ev_subject, ev_content, ev_notice, ev_filename, id, nickname) 
			 	values (ev_seq, #{item.ev_sellcvs}, #{item.ev_subject}, #{item.ev_content}, #{item.ev_notice}, #{item.ev_filename, jdbcType=VARCHAR}, #{item.id}, #{item.nickname}) 	
 		</foreach>
 	</select> -->
 	
	<insert id="autoEventInsert" parameterType="java.util.ArrayList">
	    INSERT INTO ev_board
	        (ev_idx, ev_sellcvs, ev_subject, ev_content, ev_notice, ev_filename, id, nickname)
	        <foreach collection="list" item="item" separator="UNION ALL">
	            SELECT 
					ev_seq, 
					#{item.ev_sellcvs}, 
					#{item.ev_subject}, 
					#{item.ev_content}, 
					#{item.ev_notice}, 
					#{item.ev_filename, jdbcType=VARCHAR}, 
					#{item.id}, 
					#{item.nickname}
	            FROM DUAL
	        </foreach>
	</insert>	 	

	<select id="evListAll" resultType="ev_vo">
		select * from ev_board
	</select>

	<select id="addEventList" parameterType="java.util.HashMap" resultType="ev_vo">
 		<![CDATA[  
	 		select * from (
					select * from ev_board order by ev_date desc
			) where rownum <= #{afterCnt} - #{beforeCnt}
		]]>
	</select>

	<!-- 해당 날짜에서 기간이 없는 행사를 가져오는 용도 --> 	
 	<select id="detailedSchedule" parameterType="sche_vo" resultType="sche_vo">
 		<![CDATA[  
			select * from (SELECT * FROM schedule where eyear != 0) where
			TO_DATE((syear || '-' || smonth || '-' || sday), 'YYYY-MM-DD') <= TO_DATE((#{sYear} || '-' || #{sMonth} || '-' || #{sDay}), 'YYYY-MM-DD')
			and
			TO_DATE((eyear || '-' || emonth || '-' || eday), 'YYYY-MM-DD') >= TO_DATE((#{sYear} || '-' || #{sMonth} || '-' || #{sDay}), 'YYYY-MM-DD')
			order by cvs, syear, smonth, sday, gup
		]]>
 	</select>
 	
	<!-- 해당 날짜에서 기간이 없는 행사를 가져오는 용도 --> 	
 	<select id="detailedSchedule2" parameterType="sche_vo" resultType="sche_vo">
 		<![CDATA[  
			select * from (SELECT * FROM schedule where eyear = 0) where
			TO_DATE((syear || '-' || smonth || '-' || sday), 'YYYY-MM-DD') <= TO_DATE((#{sYear} || '-' || #{sMonth} || '-' || #{sDay}), 'YYYY-MM-DD')
			and smonth = #{sMonth}
			order by cvs, syear, smonth, sday, gup
		]]>
 	</select>
 	
 	
	<!-- 신고기능 명령문 -->
	<!-- 신고접수 -->
	<insert id="reportOK" parameterType="report_vo">
		insert into report
		(report_idx, report_reason, report_comment, report_id, report_subject,
		report_location)
		values (#{report_idx}, #{report_reason}, #{report_comment}, #{report_id},
		#{report_subject}, #{report_location})
	</insert>

	<!-- 신고 기록 삭제(게시글이 삭제되면 없어져야 하므로) -->
	<delete id="reportDelete" parameterType="int">
		delete from report where
		report_idx = #{report_idx}
	</delete>
 	
</mapper>